<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.video.web.main.mapper.VideoMapper">
    <update id="updateAction">
        update user_video
        <set>
            <if test="play != null"> play = #{play}, </if>
            <if test="coin != null"> coin = #{coin}, </if>
            <if test="love != null"> love = #{love}, </if>
            <if test="unlove != null"> unlove = #{unlove}, </if>
            <if test="collect != null"> collect = #{collect}, </if>
            <if test="coinTime != null"> coin_time = #{coinTime}, </if>
            <if test="loveTime != null"> love_time = #{loveTime}, </if>
            <if test="playTime != null"> play_time = #{playTime}, </if>
        </set>
        where vid = #{vid} and uid = #{uid}
    </update>
    <update id="updateVideoStats">
        update video_stats
        set play = #{play}, comment = #{comment}, collect = #{collect}, coin = #{coin}, good = #{good}, danmu = #{danmu}
        where vid = #{vid}
    </update>

    <select id="pageItem" resultType="com.video.web.main.vo.VideoVo">
        select u.nickname, v.uid,
               v.title, v.duration, v.cover_url, v.upload_date, v.vid,
               vs.play, vs.danmu, vs.good, vs.bad, vs.coin,
               vs.collect, vs.share, vs.comment
        from
        (select video.vid, video.uid, video.title, video.mc_id, video.duration,
                video.cover_url, video.upload_date, video.visible, video.status
         from video
         <where>
             visible = 0 and status = 1
             <if test="queryVo.title != null and queryVo.title != ''">
                 and video.title like concat('%', #{queryVo.title}, '%')
             </if>
             <if test="queryVo.startDuration != null">
                 and video.duration &gt;= #{queryVo.startDuration}
             </if>
             <if test="queryVo.endDuration != null">
                 and video.duration &lt;= #{queryVo.endDuration}
             </if>
             <if test="queryVo.startTime != null">
                 and video.upload_date &gt;= #{queryVo.startTime}
             </if>
             <if test="queryVo.endTime != null">
                 and video.upload_date &lt;= #{queryVo.endTime}
             </if>
             <if test="queryVo.mcId != null and queryVo.mcId > 0">
                 and video.mc_id = #{queryVo.mcId}
             </if>
             <if test="queryVo.uid != null">
                 and video.uid = #{queryVo.uid}
             </if>
         </where>
         ) v
        left join
        (select user.uid, user.nickname from user) u on v.uid = u.uid
        left join
        (select vid,
               play,
               danmu,
               good,
               bad,
               coin,
               collect,
               share,
               comment
        from video_stats) vs on v.vid = vs.vid
        <if test="queryVo.sortField != null and queryVo.sortField != ''">
            order by ${queryVo.sortField} desc
        </if>
    </select>
    <select id="getStatsBySum" resultType="com.video.model.entity.VideoStats">
        select vid, t.pc, t.coinc, t.cc, t.lc from
        (select vid, play, coin, collect, love, SUM(love) lc, SUM(play) pc, SUM(coin) coinc, SUM(collect) cc from user_video where vid = #{vid} group by vid) t
    </select>
    <select id="calPlay" resultType="long">
        select SUM(play) from user_video where vid = #{vid}
    </select>
    <select id="calDanmu" resultType="long">
        select COUNT(*) from danmu where vid = #{vid} and status = 1
    </select>
    <select id="calLike" resultType="long">
        select SUM(love) from user_video where vid = #{vid}
    </select>
    <select id="calCoin" resultType="long">
        select SUM(coin) from user_video where vid = #{vid}
    </select>
    <select id="calCollect" resultType="long">
        select SUM(collect) from user_video where vid = #{vid}
    </select>
    <select id="calComment" resultType="long">
        select COUNT(*) from comment where vid = #{vid} and root_id = 0 and is_deleted = 0
    </select>
    <select id="batchSelect" resultType="com.video.web.main.vo.VideoVo">
        select u.nickname, v.uid,
        v.title, v.duration, v.cover_url, v.upload_date, v.vid,
        vs.play, vs.danmu, vs.good, vs.bad, vs.coin,
        vs.collect, vs.share, vs.comment
        from
        (select video.vid, video.uid, video.title, video.mc_id, video.duration,
        video.cover_url, video.upload_date, video.visible, video.status
        from video
        <where>
            visible = 0 and status = 1
            and vid in
            <foreach collection="list" item="vid" index="index" open="(" separator="," close=")">
                #{vid}
            </foreach>
        </where>
        ) v
        left join
        (select user.uid, user.nickname from user) u on v.uid = u.uid
        left join
        (select vid, play, danmu,
        good, bad, coin, collect,
        share, comment
        from video_stats) vs on v.vid = vs.vid
        order by play
    </select>
</mapper>
